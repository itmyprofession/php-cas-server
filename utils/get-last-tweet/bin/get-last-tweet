#!/usr/bin/env ruby
# encoding: utf-8

require 'logger'
require 'redis'
require 'optparse'
require 'twitter'

##
# 
# get-last-twitt.rb
#
# Retrieves last twitt sent by a specific @user and
# containing a specific #hashtag
#
# usage : get-last-twitt.rb @user #hashtag
# (arguments can come in any order)
#
# Deploying :
#
# adduser twitter
# apt-get install libreadline-dev
# su - twitter
# bash < <(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer)
# source ~/.bashrc
# rvm pkg install readline
# rvm install ruby-1.9.3
# rvm use 1.9.3@twitter --create --default
# bundle install
# 
# then put in twitter's crontab :
#
# SHELL=/bin/bash
# */30 * * * * source "$HOME/.rvm/scripts/rvm" && /some/path/get-last-twitt.rb /configfile/path
#

$logger = Logger.new(STDERR)
$logger.level = Logger::INFO

options = {}

def log_and_exit(message)
  # logs a message with ERROR level and exists app
  # @param the error [message] to write to log
  $logger.error message 
  $logger.close
  exit
end

optparse = OptionParser.new do |opts|
  opts.banner = "Usage: get-last-twitt.rb -c <cas-config-file> -s <redis server> -p <redis port>"

  opts.on('-c', '--config [FILE]', 'Sets CAS server config [FILE]') do |f|
    options[:config_file] = f
  end

  opts.on('-s', '--server [SERVER]', 'Sets Redis [SERVER] hostname') do |s|
    options[:redis_server] = s
  end

  opts.on('-p', '--port [PORT]', 'Sets Redis server [PORT]') do |p|
    options[:redis_port] = p
  end

  opts.on_tail('-h', '--help', 'Show help') do
    puts opts
    exit
  end
end

optparse.parse!


# checks that a file name is present at invocation
# and that this file exists
log_and_exit "Error : you must pass a config file as argument" unless options[:config_file]
log_and_exit "Error : unable to open config file #{options[:config_file]}" unless (File.file?(options[:config_file]))
log_and_exit "Error : you must set the redis server with -s" unless options[:redis_server]
log_and_exit "Error : you must set the redis port with -p" unless options[:redis_port]

# open config file given as argument on command line
open(options[:config_file]).each do |line|
  # loop thru config file
  line.chomp!
  $logger.debug("config : #{line}")
  begin
    if line.match('TWITTER_ACCOUNT') then
      # we have found an interesting parameter
      # let's grab the config value and store it in 'user'
      options[:user] = line.match(".*'TWITTER_ACCOUNT'.*'(.*)'")[1];
      $logger.info("found a match for TWITTER_ACCOUNT : #{user}")
    end

    if line.match('TWITTER_HASHTAG') then
      # we have found an interesting parameter
      # let's grab the config value and store it in 'hashtag'
      options[:hashtag] = line.match(".*'TWITTER_HASHTAG'.*'(.*)'")[1];
      $logger.info("found a match for TWITTER_HASHTAG : #{hashtag}")
    end

    if line.match('REDIS_NEWS_ROOT') then
      # we have found an interesting parameter
      # let's grab the config value and store it in 'hashtag'
      options[:keyroot] = line.match(".*'REDIS_NEWS_ROOT'.*'(.*)'")[1];
      $logger.info("found a match for REDIS_NEWS_ROOT : #{keyroot}")
    end

    if line.match('TWITTER_CONSUMER_KEY') then
      # we have found an interesting parameter
      # let's grab the config value and store it in 'hashtag'
      options[:consumer_key] = line.match(".*'TWITTER_CONSUMER_KEY'.*'(.*)'")[1];
      $logger.debug("found a match for TWITTER_CONSUMER_KEY : #{options[:consumer_key]}")
    end

    if line.match('TWITTER_CONSUMER_SECRET') then
      # we have found an interesting parameter
      # let's grab the config value and store it in 'hashtag'
      options[:consumer_secret] = line.match(".*'TWITTER_CONSUMER_SECRET'.*'(.*)'")[1];
      $logger.debug("found a match for TWITTER_CONSUMER_SECRET: #{options[:consumer_secret]}")
    end

    if line.match('TWITTER_OAUTH_TOKEN') then
      # we have found an interesting parameter
      # let's grab the config value and store it in 'hashtag'
      options[:oauth_token] = line.match(".*'TWITTER_OAUTH_TOKEN'.*'(.*)'")[1];
      $logger.debug("found a match for TWITTER_OAUTH_TOKEN: #{options[:oauth_token]}")
    end

    if line.match('TWITTER_OAUTH_SECRET') then
      # we have found an interesting parameter
      # let's grab the config value and store it in 'hashtag'
      options[:oauth_token_secret] = line.match(".*'TWITTER_OAUTH_SECRET'.*'(.*)'")[1];
      $logger.debug("found a match for TWITTER_OAUTH_SECRET: #{options[:oauth_token_secret]}")
    end
  rescue
    # this is quite needed if we match a string
    # but \1 is nil
    # we handle this case below
  end
end

$logger.info("Using redis server : #{options[:redis_server]}:#{options[:redis_port]}")

# croak and exit if no user or hash...
log_and_exit "Error : unable to find hashtag, user and key root in config file" unless (options.key?(:user) and options.key?(:hashtag) and options.key?(:keyroot))
# ... or if there is no @ prefix in front of user
log_and_exit "Error : user must be prefixed with '@'" unless (options[:user].gsub('^@'))
# ... or if there is no # prefix in front of the hashtag
log_and_exit "Error : hashtag must be prefixed with '#'" unless (options[:hashtag].gsub('^#'))
# Check twitter credentials
log_and_exit "Error : twitter credentials not found (requires TWITTER_CONSUMER_KEY, TWITTER_CONSUMER_SECRET, TWITTER_OAUTH_TOKEN and TWITTER_OAUTH_SECRET" unless (options[:consumer_secret] and options[:consumer_key] and options[:oauth_token] and options[:oauth_token_secret])

# twitter search doesn't want @ in front of users
# so we need to remove it
options[:user].gsub!('@','')

Twitter.configure do |config|
  config.consumer_secret    = options[:consumer_secret]
  config.consumer_key       = options[:consumer_key]
  config.oauth_token        = options[:oauth_token]
  config.oauth_token_secret = options[:oauth_token_secret]
end

tweet = Twitter.search("from:#{options[:user]} #{options[:hashtag]}", :count => 1, :result_type => "recent").results.first

if tweet.nil?
  $logger.warn "No twitt found in results"
  exit
end

text = tweet.text

# some information for the caring developper
$logger.info "Found tweet : #{text}"

# well, this is prolly useless
# it comes from an epic battle with memcached
# to get the strin gproperly encoded (and clean)
# which is something that never happened.
# Memcached won't, but was kicked out in favor of redis
# something that was going to happen anyway
text.encode!('ISO-8859-1')
date = tweet.created_at.strftime("%d/%m/%Y")

begin
  dc = Redis.new(:host => options[:redis_server], :port => options[:redis_port])
  dc.ping
rescue Redis::CannotConnectError => e
  $logger.error "Error: Redis server #{options[:redis_server]}:#{options[:redis_port]} unavailable. Shutting down..."
  exit 1
end

dc.set "#{options[:keyroot]}text", text.to_json
dc.set "#{options[:keyroot]}date", date
dc.expire("#{options[:keyroot]}text", 15*86400)
dc.expire("#{options[:keyroot]}date", 15*86400)


